#!/usr/bin/python

import RPi.GPIO as GPIO, time, os, subprocess

FILENAME=$1                     # Übernahme des Dateinamens als Parameter
echo "Filename: $FILENAME"      # Ausgabe des Dateinamens (nur für debug-Zwecke)
killall feh                     # schließen der aktuell laufenden Slideshow

# Anzeige des aktuell geknipsten Bildes für 3 Sekunden, danach Start der Slideshow
feh -F --cycle-once -D6 ./$FILENAME ###&& feh -z -F -R 2 -D 1 -Z ./*.jpg 
# Option -F steht für "Vollbild", --cycle-once sorgt dafür, dass das Programm nach der eingestellten Anzeigedauer von -D 3 (3 Sekunden) nicht neu gestartet wird. Ist die Ausführung des ersten feh-Aufrufs beendet, folgt der zweite Aufruf mit allen jpg-Bilder im Unterordner slideshow. -R 2 bedeutet, dass alle 2 Sekunden die Dateiliste neu geladen wird, so dass auch neu hinzugefügte Bilder angezeigt werden.-z für Radom wiedergabe

# GPIO setup
GPIO.setmode(GPIO.BCM)
SWITCH = 24
GPIO.setup(SWITCH, GPIO.IN, pull_up_down=GPIO.PUD_UP)
RESET = 25
GPIO.setup(RESET, GPIO.IN)
PRINT_LED = 22
POSE_LED = 18
BUTTON_LED = 23
GPIO.setup(POSE_LED, GPIO.OUT)
GPIO.setup(BUTTON_LED, GPIO.OUT)
GPIO.setup(PRINT_LED, GPIO.OUT)
GPIO.output(BUTTON_LED, True)
GPIO.output(PRINT_LED, False)

while True:
  if (GPIO.input(24)):
snap = 0
    while snap < 4:
      print("pose!")
      GPIO.output(BUTTON_LED, False)
      GPIO.output(POSE_LED, True)
      time.sleep(1.5)
      for i in range(5):
        GPIO.output(POSE_LED, 0)
        time.sleep(0.4)
        GPIO.output(POSE_LED, 1)
        time.sleep(0.4)
      for i in range(5):
        GPIO.output(POSE_LED, 0)
        time.sleep(0.1)
        GPIO.output(POSE_LED, 1)
        time.sleep(0.1)
      GPIO.output(POSE_LED, 0)
      print("SNAP")
      gpout = subprocess.check_output("gphoto2 --capture-image-and-download --filename /home/pi/photobooth_images/photobooth%H%M%S.jpg", stderr=subprocess.STDOU$
      print(gpout)
      if "ERROR" not in gpout:
        snap += 1
      GPIO.output(POSE_LED, 0)
      time.sleep(0.5)
    print("please wait while your photos print...")
    GPIO.output(PRINT_LED, 1)
    # build image and send to printer
    subprocess.call("sudo /home/pi/scripts/photobooth/assemble_and_print", shell=True)
    # TODO: implement a reboot button
    # Wait to ensure that print queue doesn't pile up
    # TODO: check status of printer instead of using this arbitrary wait time
    time.sleep(90)
    print("ready for next round")
    GPIO.output(PRINT_LED, 0)
    GPIO.output(BUTTON_LED, 1)
